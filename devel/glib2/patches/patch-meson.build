$NetBSD: patch-meson.build,v 1.10 2020/03/04 15:11:48 wiz Exp $

- On Darwin, optionally use Cocoa (needed for X11 users).

- Don't insist that Python binary is called "python3".
  (Requires meson >= 0.50.0)

- Don't install bash completion scripts.

- Tolerate getxattr not existing (smartOS)
  https://gitlab.gnome.org/GNOME/glib/merge_requests/888

- Define a newer POSIX, as we build this package with -std=gnu99

- Check size_t compatibility with various other types
  commit 505c9544247f27cb6ebf749d0902d53c33dac308
  glib bug #1777
  c.f., PR pkg/54909 and PR pkg/54298

--- meson.build.orig	2019-09-05 16:56:49.000000000 +0000
+++ meson.build
@@ -1619,28 +1619,15 @@
 }
 '''
 
-atomicdefine = '''
-#ifndef __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
-#error "compiler has atomic ops, but doesn't define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4"
-#endif
-'''
-
 # We know that we can always use real ("lock free") atomic operations with MSVC
 if cc.get_id() == 'msvc' or cc.get_id() == 'clang-cl' or cc.links(atomictest, name : 'atomic ops')
-  have_atomic_lock_free = true
-  if cc.get_id() == 'gcc' and not cc.compiles(atomicdefine, name : 'atomic ops define')
-    # Old gcc release may provide
-    # __sync_bool_compare_and_swap but doesn't define
-    # __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
-    glib_conf.set('__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4', true)
-  endif
+  glibconfig_conf.set('G_ATOMIC_LOCK_FREE', true)
 else
-  have_atomic_lock_free = false
   if host_machine.cpu_family() == 'x86' and cc.links(atomictest, args : '-march=i486')
     error('GLib must be built with -march=i486 or later.')
   endif
+  glibconfig_conf.set('G_ATOMIC_LOCK_FREE', false)
 endif
-glibconfig_conf.set('G_ATOMIC_LOCK_FREE', have_atomic_lock_free)
 
 # === Threads ===
 
@@ -1756,12 +1743,14 @@
 else
   found_iconv = false
   if ['auto', 'libc'].contains(iconv_opt) and cc.has_function('iconv_open')
-    libiconv = []
-    found_iconv = true
-  endif
-  if not found_iconv and ['auto', 'external'].contains(iconv_opt) and cc.has_header_symbol('iconv.h', 'iconv_open')
-    libiconv = [cc.find_library('iconv')]
-    found_iconv = true
+     if cc.has_header_symbol('iconv.h', 'libiconv_open')
+       glib_conf.set('USE_LIBICONV_GNU', true)
+	libiconv = [cc.find_library('iconv')]
+	found_iconv = true
+     else
+       libiconv = []
+       found_iconv = true
+     endif
   endif
 
   if not found_iconv
@@ -1835,7 +1824,7 @@
 # proxy-libintl subproject.
 # FIXME: glib-gettext.m4 has much more checks to detect broken/uncompatible
 # implementations. This could be extended if issues are found in some platforms.
-if cc.has_function('ngettext')
+if cc.has_function('ngettext') and host_system != 'sunos'
   libintl = []
   have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset')
 else
@@ -1886,16 +1875,15 @@
   if cc.has_function('getxattr') and cc.has_header('sys/xattr.h')
     glib_conf.set('HAVE_SYS_XATTR_H', 1)
     glib_conf_prefix = glib_conf_prefix + '#define @0@ 1\n'.format('HAVE_SYS_XATTR_H')
+    glib_conf.set('HAVE_XATTR', 1)
   #failure. try libattr
   elif cc.has_header_symbol('attr/xattr.h', 'getxattr')
     glib_conf.set('HAVE_ATTR_XATTR_H', 1)
     glib_conf_prefix = glib_conf_prefix + '#define @0@ 1\n'.format('HAVE_ATTR_XATTR_H')
     xattr_dep = [cc.find_library('xattr')]
-  else
-    error('No getxattr implementation found in C library or libxattr')
+    glib_conf.set('HAVE_XATTR', 1)
   endif
 
-  glib_conf.set('HAVE_XATTR', 1)
   if cc.compiles(glib_conf_prefix + '''
                  #include <stdio.h>
                  #ifdef HAVE_SYS_TYPES_H
@@ -1989,9 +1977,11 @@
 
 glib_conf.set('HAVE_PROC_SELF_CMDLINE', have_proc_self_cmdline)
 
-python = import('python').find_installation('python3')
-# used for '#!/usr/bin/env <name>'
-python_name = 'python3'
+python = import('python').find_installation('python3', required: false)
+if not python.found()
+  python = import('python').find_installation()
+endif
+python_name = python.path()
 
 python_version = python.language_version()
 python_version_req = '>=3.4'
@@ -2000,7 +1990,7 @@
 endif
 
 # Determine which user environment-dependent files that we want to install
-have_bash = find_program('bash', required : false).found() # For completion scripts
+have_bash = false # For completion scripts
 have_sh = find_program('sh', required : false).found() # For glib-gettextize
 
 # Some installed tests require a custom environment
@@ -2009,7 +1999,7 @@
 # FIXME: How to detect Solaris? https://github.com/mesonbuild/meson/issues/1578
 if host_system == 'sunos'
-  glib_conf.set('_XOPEN_SOURCE_EXTENDED', 1)
-  glib_conf.set('_XOPEN_SOURCE', 2)
+  glib_conf.set('_POSIX_C_SOURCE',200809)
   glib_conf.set('__EXTENSIONS__',1)
 endif
 
