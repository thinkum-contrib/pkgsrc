$NetBSD: patch-ai,v 1.4 2020/06/14 07:31:44 ryoon Exp $

Support CMAKE_INSTALL_MANDIR.

--- CMakeLists.txt.orig	2019-03-05 22:44:45.000000000 +0000
+++ CMakeLists.txt
@@ -275,7 +275,7 @@ ENDIF (APPLEBUNDLE)
 #Setp all the directories we will use
 #MAN
 CMAKE_POLICY(SET CMP0005 OLD)
-SET(MANDIR "${CMAKE_INSTALL_DATAROOTDIR}/man/")
+SET(MANDIR "${CMAKE_INSTALL_MANDIR}/")
 IF(WANT_VERSIONING)
     SET(SHAREDIR "${CMAKE_INSTALL_DATAROOTDIR}/${MAIN_DIR_NAME}${TAG_VERSION}/")
 ELSE(WANT_VERSIONING)
@@ -377,12 +377,6 @@ ENDIF (APPLICATION_DATA_DIR)
 
 #LIB LOCATION - lib or lib64 normally
 #LIB
-IF(WANT_LIB64)
-  IF(NOT ARCH_X86_64)
-    MESSAGE(STATUS "WARNING: BUILDING 64 Bit build on non 64 bit architecture")
-  ENDIF(NOT ARCH_X86_64)
-  SET(LIB_SUFFIX "64" CACHE TYPE STRING)
-ENDIF(WANT_LIB64)
 SET(LIB_DIR_NAME "lib${LIB_SUFFIX}")
 IF (APPLEBUNDLE)
   SET(LIBDIR "lib/")
@@ -611,8 +605,8 @@ IF (WIN32)
   # On win32 we can use Qt's zlib and libpng, so we use some
   # custom cmake includes. This permits us to honour the 
   # USE_QT_ZLIB_PNGLIB flag if passed.
-  SET(PNG_DIR ${CMAKE_MODULE_PATH})
-  SET(ZLIB_DIR ${CMAKE_MODULE_PATH})
+  SET(PNG_DIR "${CMAKE_SOURCE_DIR}/cmake/modules")
+  SET(ZLIB_DIR "${CMAKE_SOURCE_DIR}/cmake/modules")
 ENDIF (WIN32)
 FIND_PACKAGE(ZLIB REQUIRED)
 IF (ZLIB_FOUND)
@@ -651,7 +645,7 @@ ENDIF(PYTHON_LIBRARY)
 
 #<< FreeType2
 IF (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} LESS 2.6)
-  SET(FREETYPE_DIR ${CMAKE_MODULE_PATH})
+  SET(FREETYPE_DIR "${CMAKE_SOURCE_DIR}/cmake/modules")
   FIND_PACKAGE(FREETYPE REQUIRED)
   IF(FREETYPE_FOUND)
     MESSAGE("FreeType2 Library Found OK")
@@ -691,7 +685,7 @@ ELSE(RENDER_LIB)
 ENDIF(RENDER_LIB)
 
 IF (WANT_CAIRO OR RENDER_LIB STREQUAL "CAIRO")
-  SET(CAIRO_DIR ${CMAKE_MODULE_PATH})
+  SET(CAIRO_DIR "${CMAKE_SOURCE_DIR}/cmake/modules")
   FIND_PACKAGE(CAIRO)
   IF(CAIRO_FOUND)
     MESSAGE("CAIRO Library Found OK")
@@ -720,7 +714,7 @@ ENDIF (OLDRENDERLIBLOST OR WANT_QTARTHUR
 #<<CUPS
 IF(NOT WIN32 AND NOT HAIKU)
   IF (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} LESS 2.5)
-    SET(Cups_DIR ${CMAKE_MODULE_PATH})
+    SET(Cups_DIR "${CMAKE_SOURCE_DIR}/cmake/modules")
   ENDIF (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} LESS 2.5)
   FIND_PACKAGE(Cups REQUIRED)
   IF(CUPS_FOUND)
@@ -735,7 +729,7 @@ ENDIF(NOT WIN32 AND NOT HAIKU)
 
 #<<LibXML2
 IF (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} LESS 2.5)
-  SET(LibXml2_DIR ${CMAKE_MODULE_PATH})
+  SET(LibXml2_DIR "${CMAKE_SOURCE_DIR}/cmake/modules")
 ENDIF (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} LESS 2.5)
 FIND_PACKAGE(LibXml2 REQUIRED)
 IF(LIBXML2_FOUND)
@@ -745,7 +739,7 @@ ENDIF(LIBXML2_FOUND)
 #>>LibXML2
 
 #<<LittleCMS
-SET(LCMS_DIR ${CMAKE_MODULE_PATH})
+SET(LCMS_DIR "${CMAKE_SOURCE_DIR}/cmake/modules")
 FIND_PACKAGE(LCMS2)
 IF (LCMS2_FOUND)
   IF (LCMS2_VERSION GREATER 2010 OR LCMS2_VERSION EQUAL 2010)
@@ -769,7 +763,7 @@ ENDIF (NOT HAVE_LCMS21)
 
 #<<FontConfig
 IF(NOT WIN32)
-  SET(FONTCONFIG_DIR ${CMAKE_MODULE_PATH})
+  SET(FONTCONFIG_DIR "${CMAKE_SOURCE_DIR}/cmake/modules")
   FIND_PACKAGE(FONTCONFIG)
   IF(FONTCONFIG_FOUND)
 	MESSAGE("FontConfig Found OK")
